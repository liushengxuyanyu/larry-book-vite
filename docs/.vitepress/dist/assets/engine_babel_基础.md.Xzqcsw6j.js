import{_ as n,D as s,o as r,c,k as e,I as t,w as o,a as l}from"./chunks/framework.4hIqoSk1.js";const M=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"engine/babel/基础.md","filePath":"engine/babel/基础.md","lastUpdated":1710308518000}'),d={name:"engine/babel/基础.md"},i=e("h2",{id:"babel-是什么",tabindex:"-1"},[l("babel 是什么？ "),e("a",{class:"header-anchor",href:"#babel-是什么","aria-label":'Permalink to "babel 是什么？"'},"​")],-1),_=e("p",null,"Babel 是一个工具链，主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。",-1),p=e("h2",{id:"babel-的执行流程",tabindex:"-1"},[l("babel 的执行流程？ "),e("a",{class:"header-anchor",href:"#babel-的执行流程","aria-label":'Permalink to "babel 的执行流程？"'},"​")],-1),b=e("p",null,[e("strong",null,"解析(parse)")],-1),u=e("p",null,"通过 parser 把源码转成抽象语法树(AST), 目的是对源码进行词法、语法分析。",-1),h=e("p",null,[e("strong",null,"转换(transform)")],-1),f=e("p",null,"遍历 AST，调用各种 transform 插件对 AST 进行增删改",-1),m=e("p",null,[e("strong",null,"生成(generate)")],-1),g=e("p",null,"把转换后的 AST 打印成目标代码，并生成 sourcemap, sourcemap 记录了源码到目标代码的转换关系，通过它我们可以找到目标代码中每一个节点对应的源码位置，用于调试的时候把编译后的代码映射回源码，或者线上报错的时候把报错位置映射到源码。",-1),x=e("h2",{id:"core-js-的作用",tabindex:"-1"},[l("core-js 的作用？ "),e("a",{class:"header-anchor",href:"#core-js-的作用","aria-label":'Permalink to "core-js 的作用？"'},"​")],-1),k=e("code",null,"JavaScript",-1),v=e("code",null,"ECMAScript",-1),S=e("code",null,"babel",-1),P=e("h2",{id:"babel-preset-env-的作用",tabindex:"-1"},[l("@babel/preset-env 的作用？ "),e("a",{class:"header-anchor",href:"#babel-preset-env-的作用","aria-label":'Permalink to "@babel/preset-env 的作用？"'},"​")],-1),j=e("h2",{id:"plugin-和-preset-的执行顺序",tabindex:"-1"},[l("plugin 和 preset 的执行顺序？ "),e("a",{class:"header-anchor",href:"#plugin-和-preset-的执行顺序","aria-label":'Permalink to "plugin 和 preset 的执行顺序？"'},"​")],-1),A=e("li",null,[l("先应用 "),e("code",null,"plugin"),l("，再应用 "),e("code",null,"preset")],-1),T=e("code",null,"plugin",-1),B=e("code",null,"preset",-1);function C(N,$,E,J,V,w){const a=s("font");return r(),c("div",null,[i,_,p,e("p",null,[e("strong",null,[t(a,{color:"red"},{default:o(()=>[l("babel")]),_:1})]),l(" 运行总共分为三个阶段：")]),b,u,h,f,m,g,x,e("p",null,[e("strong",null,[t(a,{color:"red"},{default:o(()=>[l("core-js")]),_:1})]),l(" 是 "),k,l(" 的模块化标准库，包括了 "),v,l(" 到 2021 年的新 api 的向后兼容实现。它和 babel 高度集成，是 "),S,l(" 解决新特性在浏览器中兼容问题的核心依赖。")]),e("blockquote",null,[e("p",null,[e("strong",null,[t(a,{color:"red"},{default:o(()=>[l("corejs")]),_:1}),l(" 才是"),t(a,{color:"red"},{default:o(()=>[l("api")]),_:1}),l("兼容实现的提供者！")])])]),P,j,e("ol",null,[A,e("li",null,[T,l(),t(a,{color:"red"},{default:o(()=>[l("从前到后")]),_:1}),l("，"),B,l(),t(a,{color:"red"},{default:o(()=>[l("从后到前")]),_:1})])])])}const q=n(d,[["render",C]]);export{M as __pageData,q as default};
