import{_ as e,o as s,c as a,R as i}from"./chunks/framework.4hIqoSk1.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"language/javascript/知识点2.md","filePath":"language/javascript/知识点2.md","lastUpdated":1733279472000}'),t={name:"language/javascript/知识点2.md"},n=i(`<h2 id="创建原生的自定义事件的方式" tabindex="-1">创建原生的自定义事件的方式？ <a class="header-anchor" href="#创建原生的自定义事件的方式" aria-label="Permalink to &quot;创建原生的自定义事件的方式？&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/1-HTML%E6%A8%A1%E5%9D%97.html#_15-%E6%9C%89%E5%86%99%E8%BF%87%E5%8E%9F%E7%94%9F%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E5%90%97" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/1-HTML模块.html#_15-有写过原生的自定义事件吗</a></p><h2 id="dom事件流" tabindex="-1">DOM事件流？ <a class="header-anchor" href="#dom事件流" aria-label="Permalink to &quot;DOM事件流？&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/1-HTML%E6%A8%A1%E5%9D%97.html#_18-dom%E4%BA%8B%E4%BB%B6%E6%B5%81%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/1-HTML模块.html#_18-dom事件流是什么</a></p><h2 id="冒泡和捕获的具体过程" tabindex="-1">冒泡和捕获的具体过程？ <a class="header-anchor" href="#冒泡和捕获的具体过程" aria-label="Permalink to &quot;冒泡和捕获的具体过程？&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/1-HTML%E6%A8%A1%E5%9D%97.html#_19-%E5%86%92%E6%B3%A1%E5%92%8C%E6%8D%95%E8%8E%B7%E7%9A%84%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/1-HTML模块.html#_19-冒泡和捕获的具体过程</a></p><h2 id="cookie、sessionstorage、localstorage的区别" tabindex="-1">cookie、sessionStorage、localStorage的区别？ <a class="header-anchor" href="#cookie、sessionstorage、localstorage的区别" aria-label="Permalink to &quot;cookie、sessionStorage、localStorage的区别？&quot;">​</a></h2><p>都是存储在浏览器本地 区别：</p><ol><li><code>cookie</code>由 服务器 或 客户端 写入，<code>sessionStorage</code>以及<code>localStorage</code>都是由前端写入</li><li><code>cookie</code>的生命周期由服务器端或 客户端 写入时就设置好的，<code>localStorage</code>是写入就一直存在，除非手动清除，<code>sessionStorage</code>是由页面关闭时自动清除</li><li><code>cookie</code>存储空间大小约<code>4kb</code>， <code>sessionStorage</code>及<code>localStorage</code>空间比较大，大约<code>5M</code></li><li>三者者的数据共享都遵循同源原则，<code>sessionStorage</code>还限制必须是同一个页面</li><li>前端给后端发送请求时，自动携带<code>cookie</code>, <code>sessionStorage</code> 及 <code>localStorage</code>都不携带</li><li><code>cookie</code>一般存储登录验证信息或者<code>token</code>，<code>localStorage</code>常用于存储不易变动的数据，减轻服务器压力，<code>sessionStorage</code>可以用来监测用户是否是刷新进入页面，如音乐播放器恢复进度条功能</li></ol><h2 id="如何实现可过期的localstorage-并且自动删除" tabindex="-1">如何实现可过期的localStorage，并且自动删除？ <a class="header-anchor" href="#如何实现可过期的localstorage-并且自动删除" aria-label="Permalink to &quot;如何实现可过期的localStorage，并且自动删除？&quot;">​</a></h2><p>在存储的时候，可以加入存储时的时间key，在删除前判断超过预期的过期时间。删除方式有2种：</p><ol><li>惰性删除：每次在使用的时候，检查过期时间，判断是否删除。</li><li>定时删除：每隔一段时间轮训检查过期时间，判断是否删除。</li></ol><h2 id="谈谈ajax" tabindex="-1">谈谈Ajax? <a class="header-anchor" href="#谈谈ajax" aria-label="Permalink to &quot;谈谈Ajax?&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/3-JS%E6%A8%A1%E5%9D%97.html#_19-ajax%E6%80%BB%E7%BB%93" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/3-JS模块.html#_19-ajax总结</a></p><h2 id="谈谈fetch" tabindex="-1">谈谈fetch？ <a class="header-anchor" href="#谈谈fetch" aria-label="Permalink to &quot;谈谈fetch？&quot;">​</a></h2><p>fech 也是原生技术，是ajax的代替方案，语法简洁，支持promise</p><p><a href="https://interview.poetries.top/docs/base.html#_95-ajax%E3%80%81axios%E3%80%81fetch%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/base.html#_95-ajax、axios、fetch区别</a></p><h2 id="axios拦截器以及应用" tabindex="-1">axios拦截器以及应用？ <a class="header-anchor" href="#axios拦截器以及应用" aria-label="Permalink to &quot;axios拦截器以及应用？&quot;">​</a></h2><h2 id="axios如何取消请求" tabindex="-1">axios如何取消请求？ <a class="header-anchor" href="#axios如何取消请求" aria-label="Permalink to &quot;axios如何取消请求？&quot;">​</a></h2><p>Axios提供了取消请求的方法，可以通过使用取消令牌（cancel token）来取消请求。取消令牌是一个对象，它包含一个 cancel 方法，用于取消请求。可以通过向请求配置对象中添加 cancelToken 属性来传递取消令牌。 以下是使用Axios取消请求的示例代码：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个取消令牌对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cancelToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios.CancelToken;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cancelToken.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送请求时添加取消令牌</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {cancelToken : source.token}).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { console.log(response.data); }).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (axios.isCancel(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请求已经被取消了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} else { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消请求 source.cancel(&#39;请求被用户取消了&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="有什么方法可以保持前后端实时通信" tabindex="-1">有什么方法可以保持前后端实时通信？ <a class="header-anchor" href="#有什么方法可以保持前后端实时通信" aria-label="Permalink to &quot;有什么方法可以保持前后端实时通信？&quot;">​</a></h2><p>轮训、websocket等</p><h2 id="web-worker-的用法" tabindex="-1">Web Worker 的用法？ <a class="header-anchor" href="#web-worker-的用法" aria-label="Permalink to &quot;Web Worker 的用法？&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/5-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9D%97.html#_7-1-web-worker" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/5-浏览器模块.html#_7-1-web-worker</a></p><h2 id="service-worker-的用法" tabindex="-1">Service Worker 的用法？ <a class="header-anchor" href="#service-worker-的用法" aria-label="Permalink to &quot;Service Worker 的用法？&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/5-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9D%97.html#_7-2-service-worker" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/5-浏览器模块.html#_7-2-service-worker</a></p><h2 id="requestanimationframe-的用法" tabindex="-1">requestAnimationFrame 的用法？ <a class="header-anchor" href="#requestanimationframe-的用法" aria-label="Permalink to &quot;requestAnimationFrame 的用法？&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/3-JS%E6%A8%A1%E5%9D%97.html#_22-4-%E8%AF%B4%E4%B8%80%E4%B8%8Brequestanimationframe" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/3-JS模块.html#_22-4-说一下requestanimationframe</a></p><p><a href="https://interview.poetries.top/docs/excellent-docs/5-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9D%97.html#_7-3-requestanimationframe%E7%94%A8%E6%B3%95" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/5-浏览器模块.html#_7-3-requestanimationframe用法</a></p>`,30),r=[n];function l(o,h,p,c,d,k){return s(),a("div",null,r)}const m=e(t,[["render",l]]);export{g as __pageData,m as default};
