import{_ as a,o as e,c as t,R as s}from"./chunks/framework.4hIqoSk1.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"language/javascript/03.md","filePath":"language/javascript/03.md","lastUpdated":1716781226000}'),i={name:"language/javascript/03.md"},l=s('<div class="tip custom-block"><p class="custom-block-title">提示</p><p>这里都是面试常问到的，问题很多都很简单，但回答的是否让面试官满意，完全取决于回答的深度。</p></div><h2 id="什么是-js-调用栈" tabindex="-1">什么是 JS 调用栈？ <a class="header-anchor" href="#什么是-js-调用栈" aria-label="Permalink to &quot;什么是 JS 调用栈？&quot;">​</a></h2><details class="details custom-block"><summary>查看答案</summary><p>在执行上下文创建好后，JavaScript 引擎会将执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为执行上下文栈，又称调用栈。</p><ul><li><p>每调用一个函数，JavaScript 引擎会为其创建执行上下文，并把该执行上下文压入调用栈，然后 JavaScript 引擎开始执行函数代码。</p></li><li><p>如果在一个函数 A 中调用了另外一个函数 B，那么 JavaScript 引擎会为 B 函数创建执行上下文，并将 B 函数的执行上下文压入栈顶。</p></li><li><p>当前函数执行完毕后，JavaScript 引擎会将该函数的执行上下文弹出栈。</p></li><li><p>当分配的调用栈空间被占满时，会引发“堆栈溢出”问题。</p></li></ul></details><h2 id="谈谈-js-模块化解决方案" tabindex="-1">谈谈 JS 模块化解决方案？ <a class="header-anchor" href="#谈谈-js-模块化解决方案" aria-label="Permalink to &quot;谈谈 JS 模块化解决方案？&quot;">​</a></h2><h2 id="浏览器和-node-js-中的事件循环机制有什么区别" tabindex="-1">浏览器和 Node.js 中的事件循环机制有什么区别？ <a class="header-anchor" href="#浏览器和-node-js-中的事件循环机制有什么区别" aria-label="Permalink to &quot;浏览器和 Node.js 中的事件循环机制有什么区别？&quot;">​</a></h2><h2 id="js-引擎-v8-的工作原理-如何执行一段-js-代码" tabindex="-1">JS 引擎(V8)的工作原理（如何执行一段 JS 代码）？ <a class="header-anchor" href="#js-引擎-v8-的工作原理-如何执行一段-js-代码" aria-label="Permalink to &quot;JS 引擎(V8)的工作原理（如何执行一段 JS 代码）？&quot;">​</a></h2>',6),r=[l];function o(c,d,n,p,_,h){return e(),t("div",null,r)}const S=a(i,[["render",o]]);export{m as __pageData,S as default};
