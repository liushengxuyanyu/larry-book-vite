import{_ as e,o,c as d,R as t}from"./chunks/framework.4hIqoSk1.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frame/vue3/02.md","filePath":"frame/vue3/02.md","lastUpdated":1733279472000}'),c={name:"frame/vue3/02.md"},a=t('<h2 id="vue3宏是什么-为什么不需要导入就可以使用" tabindex="-1">vue3宏是什么，为什么不需要导入就可以使用？ <a class="header-anchor" href="#vue3宏是什么-为什么不需要导入就可以使用" aria-label="Permalink to &quot;vue3宏是什么，为什么不需要导入就可以使用？&quot;">​</a></h2><p>原理：<a href="https://vue-compiler.iamouyang.cn/script/what-macros.html" target="_blank" rel="noreferrer">https://vue-compiler.iamouyang.cn/script/what-macros.html</a> vue3的宏是一种特殊的代码，在编译时会将这些特殊的代码转换为浏览器能够直接运行的指定代码，根据宏的功能不同，转换后的代码也不同。</p><h3 id="为什么这些宏不需要手动从vue中import" tabindex="-1">为什么这些宏不需要手动从vue中import？ <a class="header-anchor" href="#为什么这些宏不需要手动从vue中import" aria-label="Permalink to &quot;为什么这些宏不需要手动从vue中import？&quot;">​</a></h3><p>因为在编译时已经将这些宏替换为指定的浏览器能够直接运行的代码，在运行时已经不存在这些宏相关的代码，自然不需要从<code>vue</code>中<code>import</code>。</p><h3 id="为什么只能在setup顶层中使用这些宏" tabindex="-1">为什么只能在setup顶层中使用这些宏？ <a class="header-anchor" href="#为什么只能在setup顶层中使用这些宏" aria-label="Permalink to &quot;为什么只能在setup顶层中使用这些宏？&quot;">​</a></h3><p>因为在编译时只会去处理<code>setup</code>顶层的宏，其他地方的宏会原封不动的输出回来。在运行时由于我们没有在任何地方定义这些宏，当代码执行到宏的时候当然就会报错。</p><h2 id="setup语法糖的原理" tabindex="-1">setup语法糖的原理？ <a class="header-anchor" href="#setup语法糖的原理" aria-label="Permalink to &quot;setup语法糖的原理？&quot;">​</a></h2><p><code>setup</code>语法糖经过编译后就变成了<code>setup</code>函数，而<code>setup</code>函数的返回值是一个对象，这个对象就是由在<code>setup</code>顶层定义的变量和<code>import</code>导入组成的。<code>vue</code>在初始化的时候会执行<code>setup</code>函数，然后将<code>setup</code>函数返回值经过<code>Proxy</code>处理后塞到<code>vue</code>实例的<code>setupState</code>属性上。</p><p>执行<code>render</code>函数的时候会将<code>vue</code>实例上的<code>setupState</code>属性（也就是<code>setup</code>函数的返回值）传递给<code>render</code>函数，所以在<code>render</code>函数中就可以访问到<code>setup</code>顶层定义的变量和<code>import</code>导入。而<code>render</code>函数实际就是由<code>template</code>编译得来的，所以说在<code>template</code>中就可以访问到<code>setup</code>顶层定义的变量和<code>import</code>导入。</p><h3 id="为什么在setup顶层定义的变量可以在template中可以直接使用" tabindex="-1">为什么在setup顶层定义的变量可以在template中可以直接使用? <a class="header-anchor" href="#为什么在setup顶层定义的变量可以在template中可以直接使用" aria-label="Permalink to &quot;为什么在setup顶层定义的变量可以在template中可以直接使用?&quot;">​</a></h3><p>因为在<code>setup</code>语法糖顶层定义的变量经过编译后会被加入到<code>setup</code>函数返回值对象<code>__returned__</code>中，而非<code>setup</code>顶层定义的变量不会加入到<code>__returned__</code>对象中。</p><p><code>setup</code>函数返回值经过<code>Proxy</code>处理后会被塞到<code>vue</code>实例的<code>setupState</code>属性上，执行<code>render</code>函数的时候会将<code>vue</code>实例上的<code>setupState</code>属性传递给<code>render</code>函数，所以在<code>render</code>函数中就可以访问到<code>setup</code>顶层定义的变量和<code>import</code>导入。</p><p>而<code>render</code>函数实际就是由<code>template</code>编译得来的，所以说在<code>template</code>中可以访问到<code>setup</code>顶层定义的变量和<code>import</code>导入。。</p><h3 id="为什么import一个组件后就可以直接使用-无需使用components-选项来显式注册组件" tabindex="-1">为什么import一个组件后就可以直接使用，无需使用components 选项来显式注册组件？ <a class="header-anchor" href="#为什么import一个组件后就可以直接使用-无需使用components-选项来显式注册组件" aria-label="Permalink to &quot;为什么import一个组件后就可以直接使用，无需使用components 选项来显式注册组件？&quot;">​</a></h3><p>因为在<code>setup</code>语法糖中<code>import</code>导入的组件对象经过编译后同样也会被加入到<code>setup</code>函数返回值对象<code>__returned__</code>中，同理在<code>template</code>中也可以访问到<code>setup</code>的返回值对象，也就可以直接使用这个导入的组件了。</p><h2 id="definemodel-的实现原理" tabindex="-1">defineModel 的实现原理？ <a class="header-anchor" href="#definemodel-的实现原理" aria-label="Permalink to &quot;defineModel 的实现原理？&quot;">​</a></h2><p>原理：<a href="https://vue-compiler.iamouyang.cn/script/defineModel.html" target="_blank" rel="noreferrer">https://vue-compiler.iamouyang.cn/script/defineModel.html</a></p><p><strong>使用：</strong> vue3.4增加了defineModel宏函数，在子组件内修改了defineModel的返回值，父组件上v-model绑定的变量就会被更新。</p><h3 id="为什么不需要声明props的代码" tabindex="-1">为什么不需要声明props的代码？ <a class="header-anchor" href="#为什么不需要声明props的代码" aria-label="Permalink to &quot;为什么不需要声明props的代码？&quot;">​</a></h3><h3 id="为什么不需要声明emit的代码" tabindex="-1">为什么不需要声明emit的代码？ <a class="header-anchor" href="#为什么不需要声明emit的代码" aria-label="Permalink to &quot;为什么不需要声明emit的代码？&quot;">​</a></h3><h3 id="definemodel的返回值等于父组件v-model绑定的变量值-那么这个返回值是否就是名为modelvalue的props呢" tabindex="-1">defineModel的返回值等于父组件v-model绑定的变量值，那么这个返回值是否就是名为modelValue的props呢？ <a class="header-anchor" href="#definemodel的返回值等于父组件v-model绑定的变量值-那么这个返回值是否就是名为modelvalue的props呢" aria-label="Permalink to &quot;defineModel的返回值等于父组件v-model绑定的变量值，那么这个返回值是否就是名为modelValue的props呢？&quot;">​</a></h3><p>不是<code>props</code>，是一个<code>ref</code>对象。</p><h3 id="直接修改definemodel的返回值就会修改父组件上面绑定的变量-那么这个行为是否相当于子组件直接修改了父组件的变量值-破坏了vue的单向数据流呢" tabindex="-1">直接修改defineModel的返回值就会修改父组件上面绑定的变量，那么这个行为是否相当于子组件直接修改了父组件的变量值，破坏了vue的单向数据流呢？ <a class="header-anchor" href="#直接修改definemodel的返回值就会修改父组件上面绑定的变量-那么这个行为是否相当于子组件直接修改了父组件的变量值-破坏了vue的单向数据流呢" aria-label="Permalink to &quot;直接修改defineModel的返回值就会修改父组件上面绑定的变量，那么这个行为是否相当于子组件直接修改了父组件的变量值，破坏了vue的单向数据流呢？&quot;">​</a></h3><p>修改<code>defineModel</code>的返回值，就会更新父组件中<code>v-model</code>绑定的变量值。看着就像是子组件中直接修改了父组件的变量值，从表面上看着像是打破了<code>vue</code>的单向数据流。实则并不是那样的，虽然我们在代码中没有写过<code>emit</code>抛出事件的代码，但是在<code>defineModel</code>函数编译成的<code>useModel</code>函数中已经帮我们使用<code>emit</code>抛出事件了。所以并没有打破<code>vue</code>的单向数据流</p><h2 id="defineexpose的实现原理" tabindex="-1">defineExpose的实现原理？ <a class="header-anchor" href="#defineexpose的实现原理" aria-label="Permalink to &quot;defineExpose的实现原理？&quot;">​</a></h2>',25),r=[a];function p(i,l,s,n,u,m){return o(),d("div",null,r)}const _=e(c,[["render",p]]);export{f as __pageData,_ as default};
