import{_ as t,D as o,o as p,c as d,k as s,I as n,w as i,a,R as l}from"./chunks/framework.4hIqoSk1.js";const r="/larry-book-vite/assets/lifecycle.U4Y4AfvC.png",ps=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frame/vue2/lifeCycle.md","filePath":"frame/vue2/lifeCycle.md","lastUpdated":1733279472000}'),c={name:"frame/vue2/lifeCycle.md"},h=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"提示"),s("p",null,"生命周期相关专题 训练，无特殊说明，指的都是 Vue2")],-1),k=s("h2",{id:"vue-的生命周期-钩子",tabindex:"-1"},[a("Vue 的生命周期(钩子)? "),s("a",{class:"header-anchor",href:"#vue-的生命周期-钩子","aria-label":'Permalink to "Vue 的生命周期(钩子)?"'},"​")],-1),u={class:"info custom-block"},b=s("p",{class:"custom-block-title"},null,-1),g=l('<ol><li><strong>beforeCreated</strong>:</li></ol><p>实例了<code>vue</code>，但还没有进行数据初始化 和 响应式处理</p><ol start="2"><li><strong>created</strong>:</li></ol><p><code>vue</code>实例创建后同步调用，在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：<code>数据侦听</code>、<code>计算属性</code>、<code>方法</code>、<code>事件/侦听器</code>的回调函数。然而，挂载阶段还没开始，且 <code>$el property</code> 目前尚不可用。</p><ol start="3"><li><strong>beforeMount</strong>:</li></ol><p><code>render</code>函数在这里会被调用，生成<code>虚拟DOM</code>, 但是还没有生成真正的<code>DOM</code>并替换到<code>el</code>上</p><ol start="4"><li><strong>mounted</strong>:</li></ol><p>在这个阶段真实的<code>DOM</code>挂载完毕，可以获取到<code>DOM</code>。 注意 <code>mounted</code> 不会保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 <code>mounted</code> 内部使用 <code>vm.$nextTick</code></p>',8),E=l('<ol start="5"><li><strong>beforeUpdate</strong>:</li></ol><p>数据更新后，新的<code>虚拟DOM</code>生成，但还没有和<code>旧的虚拟DOM</code>做对比.</p><ol start="6"><li><strong>update</strong>:</li></ol><p><code>新旧虚拟DOM</code>对比后，进行<code>真实DOM</code>更新，注意，<code>updated</code> 不会保证所有的子组件也都被重新渲染完毕。如果你希望等到整个视图都渲染完毕，可以在 updated 里使用 <code>vm.$nextTick</code></p><ol start="7"><li><strong>activated</strong>:</li></ol><p>被<code>keep-alive</code>缓存组件激活时调用</p><ol start="8"><li><strong>deactivated</strong>:</li></ol><p>被<code>keep-alive</code>缓存组件停用时调用</p><p><strong>(注：路由注册中设置 keep-alive: true 即缓存的页面没有 9、10 两个销毁生命周期)</strong></p>',9),_=s("ol",{start:"9"},[s("li",null,[s("strong",null,"beforeDestroy"),a(":")])],-1),m=s("p",null,"组件实例销毁之前调用，在这里依然能够获取到数据。",-1),y=s("ol",{start:"10"},[s("li",null,[s("strong",null,"destroyed"),a(":")])],-1),f=s("p",null,"组件实例销毁后调用，对应的所有指令、事件将会被解绑，所有子组件实例也会被销毁",-1),C=s("ol",{start:"11"},[s("li",null,[s("strong",null,"errorCaptured(2.5.0+ 新增)"),a(":")])],-1),F=s("p",null,"在捕获一个来自后代组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。",-1),v=s("blockquote",null,[s("p",null,[s("strong",null,"完整生命周期图，生命周期很重点。完全理解了 vue 的生命周期，就知道运转流程。会规避很多错误。")])],-1),D=s("p",null,[s("img",{src:r,alt:""})],-1),A=l('<h2 id="页面第一次加载会触发那几个生命周期-钩子" tabindex="-1">页面第一次加载会触发那几个生命周期(钩子)? <a class="header-anchor" href="#页面第一次加载会触发那几个生命周期-钩子" aria-label="Permalink to &quot;页面第一次加载会触发那几个生命周期(钩子)?&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title"></p><blockquote><p>在路由面试题内，有带有路由版本的答案</p></blockquote><p>会触发 <code>beforeCreate</code>, <code>created</code>, <code>beforeMount</code>, <code>mounted</code> 这几个钩子</p></div><h2 id="dom-渲染在-哪个周期中完成的" tabindex="-1">DOM 渲染在 哪个周期中完成的？ <a class="header-anchor" href="#dom-渲染在-哪个周期中完成的" aria-label="Permalink to &quot;DOM 渲染在 哪个周期中完成的？&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title"></p><p><strong>mounted</strong></p></div><h2 id="在哪个生命周期内调用异步请求" tabindex="-1">在哪个生命周期内调用异步请求？ <a class="header-anchor" href="#在哪个生命周期内调用异步请求" aria-label="Permalink to &quot;在哪个生命周期内调用异步请求？&quot;">​</a></h2>',5),B={class:"info custom-block"},q=s("p",{class:"custom-block-title"},null,-1),T=s("p",null,[a("可以在钩子函数 "),s("strong",null,"created、beforeMount、mounted"),a(" 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。")],-1),P=s("ol",null,[s("li",null,"能更快获取到服务端数据，减少页面 loading 时间"),s("li",null,[s("strong",null,"SSR"),a(" 不支持 "),s("strong",null,"beforeMount"),a("、"),s("strong",null,"mounted"),a(" 钩子函数，所以放在 "),s("strong",null,"created"),a(" 中有助于一致性")])],-1),V=s("h2",{id:"在-beforecreate、created、beforemount、mounted、beforeupdate-修改数据会触发-updated-钩子吗",tabindex:"-1"},[a("在 beforeCreate、created、beforeMount、mounted、beforeUpdate 修改数据会触发 updated 钩子吗？ "),s("a",{class:"header-anchor",href:"#在-beforecreate、created、beforemount、mounted、beforeupdate-修改数据会触发-updated-钩子吗","aria-label":'Permalink to "在 beforeCreate、created、beforeMount、mounted、beforeUpdate 修改数据会触发 updated 钩子吗？"'},"​")],-1),S={class:"info custom-block"},M=s("p",{class:"custom-block-title"},null,-1),x=s("code",null,"beforeCreate",-1),O=s("code",null,"updated",-1),$=s("code",null,"created",-1),I=s("code",null,"data",-1),j=s("strong",null,"页面会更新修改后的数据(首次渲染相当于，在 mounted 挂在后更新的)",-1),N=s("code",null,"updated",-1),U=s("code",null,"beforeMount",-1),w=s("code",null,"updated",-1),R=s("code",null,"mounted",-1),J=s("code",null,"updated",-1),Y=s("code",null,"beforeUpdate",-1),z=s("code",null,"updated",-1),G=l(`<h2 id="在-updated-中修改数据会怎么样" tabindex="-1">在 updated 中修改数据会怎么样？ <a class="header-anchor" href="#在-updated-中修改数据会怎么样" aria-label="Permalink to &quot;在 updated 中修改数据会怎么样？&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title"></p><p><strong>首先可以确定的是并不会触发死循环。</strong></p><p>要分 2 种情况：</p><ol><li>触发 <code>updated</code> 钩子之前，修改的数据 和 <code>updated</code> 内修改的数据 值保持一致的话，只会触发 <strong>一次</strong> <code>updated</code>, vue 内部对响应式处理 有判断，如果两次修改的值 一致的话，直接返回，并不会触发响应式更新。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // updated内，再次 修改数据 值如果和之前一样，则不会触发 updated</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 点击clickFn 修改数据 会触发 updated,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clickFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="2"><li>触发 <code>updated</code> 钩子之前，修改的数据 和 <code>updated</code> 内修改的数据 值不同的话，会触发 <strong>两次</strong></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // updated内，修改为 123，则触发 响应式更新，所以再次 进入到 updated视图中，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 然后又执行同样的赋值操作，和上次保持一致，不会再触发更新。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 点击clickFn 修改数据 会触发 updated,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clickFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 456</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div><h2 id="生命周期钩子可以使用箭头函数吗" tabindex="-1">生命周期钩子可以使用箭头函数吗？ <a class="header-anchor" href="#生命周期钩子可以使用箭头函数吗" aria-label="Permalink to &quot;生命周期钩子可以使用箭头函数吗？&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title"></p><p>不可以，在初始化生命周期钩子的时候，会内部会使用<code>apply</code> 和 <code>call</code> 改变<code>this</code>的只想，在箭头函数中<code>this</code>指向是无法改变的。</p></div><h2 id="vue-父子组件生命周期流程" tabindex="-1">Vue 父子组件生命周期流程？ <a class="header-anchor" href="#vue-父子组件生命周期流程" aria-label="Permalink to &quot;Vue 父子组件生命周期流程？&quot;">​</a></h2>`,5),H={class:"info custom-block"},K=s("p",{class:"custom-block-title"},null,-1),L=s("p",null,[s("strong",null,"渲染挂载过程：")],-1),Q=s("p",null,[s("strong",null,"子组件更新过程：")],-1),W=s("p",null,[s("strong",null,"父组件更新过程：")],-1),X=s("p",null,[s("strong",null,"销毁过程：")],-1),Z=l(`<h2 id="父组件可以监听到子组件的生命周期吗" tabindex="-1">父组件可以监听到子组件的生命周期吗？ <a class="header-anchor" href="#父组件可以监听到子组件的生命周期吗" aria-label="Permalink to &quot;父组件可以监听到子组件的生命周期吗？&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title"></p><ol><li><strong>子组件<code>$emit()</code>触发自定义事件</strong></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Parent.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Child</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @mounted=&quot;doSomething&quot;/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Child.vue</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">mounted()</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mounted&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li><strong>使用<code>hook event</code> 是 Vue 的自定义事件结合生命周期钩子实现的一种从组件外部为组件注入额外生命周期方法的功能。</strong></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  Parent.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Child</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @hook:mounted=&quot;doSomething&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;父组件监听到 mounted 钩子函数 ...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  Child.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;子组件触发 mounted 钩子函数 ...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以上输出顺序为：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子组件触发 mounted 钩子函数 ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父组件监听到 mounted 钩子函数 ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>@hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。</strong></p></div><h2 id="vue-的-el-属性和-mount-优先级" tabindex="-1">Vue 的 el 属性和$mount 优先级？ <a class="header-anchor" href="#vue-的-el-属性和-mount-优先级" aria-label="Permalink to &quot;Vue 的 el 属性和$mount 优先级？&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title"></p><p>**<code>el</code>**的优先级会高，如下会渲染到<code>app</code>节点上。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  store,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#ggg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div>`,4);function ss(as,es,ns,is,ls,ts){const e=o("font");return p(),d("div",null,[h,k,s("div",u,[b,s("p",null,[s("strong",null,[n(e,{style:{color:"red"}},{default:i(()=>[a("---------------创建阶段--------------")]),_:1})])]),g,s("p",null,[s("strong",null,[n(e,{style:{color:"red"}},{default:i(()=>[a("---------------运行阶段--------------")]),_:1})])]),E,s("p",null,[s("strong",null,[n(e,{style:{color:"red"}},{default:i(()=>[a("---------------销毁阶段--------------")]),_:1})])]),_,m,y,f,s("p",null,[s("strong",null,[n(e,{style:{color:"red"}},{default:i(()=>[a("---------------捕获组件错误--------------")]),_:1})])]),C,F,v,D]),A,s("div",B,[q,T,s("p",null,[a("但是推荐在 "),s("strong",null,[n(e,{color:"red"},{default:i(()=>[a("created")]),_:1})]),a(" 钩子函数中调用异步请求，因为在 "),s("strong",null,[n(e,{color:"red"},{default:i(()=>[a("created")]),_:1})]),a(" 钩子函数中调用异步请求有以下优点：")]),P]),V,s("div",S,[M,s("ul",null,[s("li",null,[s("p",null,[x,a("是拿不到响应式数据的，可以修改，但没有响应式效果 页面也不会显示修改后的数据，更"),n(e,{color:"red"},{default:i(()=>[a("不会")]),_:1}),a("触发 "),O])]),s("li",null,[s("p",null,[$,a("可以拿到"),I,a("中响应式数据，修改后，"),j,a(", 但"),n(e,{color:"red"},{default:i(()=>[a("不会")]),_:1}),a("触发 "),N])]),s("li",null,[s("p",null,[U,a(" 和 created 一样，只不过这一步 仅仅是 虚拟 DOM 创建完毕， "),n(e,{color:"red"},{default:i(()=>[a("不会")]),_:1}),a("触发 "),w])]),s("li",null,[s("p",null,[R,a(" 这时候页面已经挂载完毕，已经可以访问真实 DOM，在这里会修改数据的话， "),n(e,{color:"blue"},{default:i(()=>[a("会")]),_:1}),a("触发 "),J])]),s("li",null,[s("p",null,[Y,a(" 这个钩子发生在更新之前，也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，可以在当前阶段进行更改数据，不会造成重渲染, "),n(e,{color:"red"},{default:i(()=>[a("不会")]),_:1}),a("触发 "),z])])])]),G,s("div",H,[K,s("p",null,[s("strong",null,[n(e,{color:"red"},{default:i(()=>[a("父子组件的生命周期是一个嵌套的过程。")]),_:1})])]),L,s("blockquote",null,[n(e,{color:"red"},{default:i(()=>[a("父 beforeCreate")]),_:1}),a(" -> "),n(e,{color:"red"},{default:i(()=>[a("父 created")]),_:1}),a(" -> "),n(e,{color:"red"},{default:i(()=>[a("父 beforeMount")]),_:1}),a(" -> "),n(e,{color:"blue"},{default:i(()=>[a("子 beforeCreate")]),_:1}),a(" -> "),n(e,{color:"blue"},{default:i(()=>[a("子 created")]),_:1}),a(" -> "),n(e,{color:"blue"},{default:i(()=>[a("子 beforeMount")]),_:1}),a(" -> "),n(e,{color:"blue"},{default:i(()=>[a("子 mounted")]),_:1}),a(" -> "),n(e,{color:"red"},{default:i(()=>[a("父 mounted")]),_:1})]),Q,s("blockquote",null,[n(e,{color:"red"},{default:i(()=>[a("父 beforeUpdate")]),_:1}),a(" -> "),n(e,{color:"blue"},{default:i(()=>[a("子 beforeUpdate")]),_:1}),a(" -> "),n(e,{color:"blue"},{default:i(()=>[a("子 updated")]),_:1}),a(" -> "),n(e,{color:"red"},{default:i(()=>[a("父 updated")]),_:1})]),W,s("blockquote",null,[n(e,{color:"red"},{default:i(()=>[a("父 beforeUpdate")]),_:1}),a(" -> "),n(e,{color:"red"},{default:i(()=>[a("父 updated")]),_:1})]),X,s("blockquote",null,[n(e,{color:"red"},{default:i(()=>[a("父 beforeDestroy")]),_:1}),a(" -> "),n(e,{color:"blue"},{default:i(()=>[a("子 beforeDestroy")]),_:1}),a(" -> "),n(e,{color:"blue"},{default:i(()=>[a("子 destroyed")]),_:1}),a(" -> "),n(e,{color:"red"},{default:i(()=>[a("父 destroyed")]),_:1})])]),Z])}const ds=t(c,[["render",ss]]);export{ps as __pageData,ds as default};
