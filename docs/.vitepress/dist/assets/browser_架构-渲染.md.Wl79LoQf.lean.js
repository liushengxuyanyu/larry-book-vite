import{_ as n,D as r,o as s,c as _,k as o,I as c,w as d,a as l,R as t}from"./chunks/framework.4hIqoSk1.js";const a="/larry-book-vite/assets/01.YcjHWyMa.png",u="/larry-book-vite/assets/02.0cggyvJJ.png",qo=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"browser/架构-渲染.md","filePath":"browser/架构-渲染.md","lastUpdated":1733279472000}'),i={name:"browser/架构-渲染.md"},p=o("p",null,[l("tip 大部分都是围绕 "),o("code",null,"chromium"),l("内核 浏览器来说，面试也是基于这个内核去问。")],-1),h=o("h2",{id:"chrome、chromium、v8-分别是什么",tabindex:"-1"},[l("Chrome、Chromium、V8 分别是什么？ "),o("a",{class:"header-anchor",href:"#chrome、chromium、v8-分别是什么","aria-label":'Permalink to "Chrome、Chromium、V8 分别是什么？"'},"​")],-1),S=o("p",null,[o("code",null,"Chromium"),l("是谷歌的开源项目，我们平时说的基于 "),o("strong",null,"谷歌浏览器内核"),l(" 的浏览器其实说的是基于"),o("code",null,"Chromium"),l("内核来开发自己的浏览器。更多面向的是 开发人员。")],-1),g=o("code",null,"Chrome",-1),T=o("a",{href:"https://blog.csdn.net/fuhanghang/article/details/112859503",target:"_blank",rel:"noreferrer"},"Chrome V8 引擎介绍",-1),f=t("",5),m=o("code",null,"CPU",-1),b=o("strong",null,"资源分配",-1),C=o("code",null,"CPU",-1),P=o("strong",null,"调度",-1),k=o("p",null,[o("strong",null,"区别：")],-1),M=o("li",null,[o("p",null,"创建和销毁线程的开销较小，而创建和销毁进程的开销较大。")],-1),A=o("li",null,[o("p",null,"多线程程序的编程复杂度通常比单线程程序高，但多线程可以更好地利用多核处理器来提高程序的执行效率。")],-1),D=o("h2",{id:"浏览器都有哪些进程",tabindex:"-1"},[l("浏览器都有哪些进程？ "),o("a",{class:"header-anchor",href:"#浏览器都有哪些进程","aria-label":'Permalink to "浏览器都有哪些进程？"'},"​")],-1),J=o("ul",null,[o("li",null,[l("主要负责"),o("strong",null,"界面显示"),l("、"),o("strong",null,"用户交互"),l("、"),o("strong",null,"子进程管理"),l("，同时提供"),o("strong",null,"存储"),l("等功能。")])],-1),I=t("",1),V=t("",1),v=o("ul",null,[o("li",null,[l("主要负责页面的"),o("strong",null,"网络资源加载"),l("，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")])],-1),O=o("ul",null,[o("li",null,"主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")],-1),R=o("p",null,[o("img",{src:a,alt:"概览图"})],-1),N=o("h2",{id:"渲染进程有哪些线程",tabindex:"-1"},[l("渲染进程有哪些线程？ "),o("a",{class:"header-anchor",href:"#渲染进程有哪些线程","aria-label":'Permalink to "渲染进程有哪些线程？"'},"​")],-1),L=t("",2),U=o("code",null,"GUI",-1),E=o("code",null,"JS 引擎",-1),q=o("li",null,[o("p",null,[o("code",null,"Javascript"),l(" 引擎,也称为 "),o("code",null,"JS"),l(" 内核,负责处理 "),o("code",null,"Javascript"),l(" 脚本程序。（例如 V8 引擎）")])],-1),x=o("code",null,"Javascript",-1),y=t("",1),j=o("ul",null,[o("li",null,[o("p",null,[l("传说中的 "),o("code",null,"setInterval"),l(" 与 "),o("code",null,"setTimeout"),l(" 所在线程")])]),o("li",null,[o("p",null,"浏览器定时计数器并不是由 JavaScript 引擎计数的,（因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）")]),o("li",null,[o("p",null,"因此通过单独线程来计时并触发定时（计时完毕后,添加到事件队列中,等待 JS 引擎空闲后执行）")]),o("li",null,[o("p",null,"注意,W3C 在 HTML 标准中规定,规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms。")])],-1),w=t("",6),G=o("code",null,"JavaScript",-1),H=o("code",null,"UI DOM",-1),Y=o("code",null,"UI",-1),B=o("code",null,"Javascript",-1),K=o("blockquote",null,[o("p",null,"想下 浏览器渲染进程 架构的 五个 线程，会帮 JS 引擎线程 解决单线程带来的问题。")],-1),$=o("h2",{id:"js-会阻塞页面渲染吗",tabindex:"-1"},[l("JS 会阻塞页面渲染吗？ "),o("a",{class:"header-anchor",href:"#js-会阻塞页面渲染吗","aria-label":'Permalink to "JS 会阻塞页面渲染吗？"'},"​")],-1),W=o("p",null,[l("会的，参考上边 "),o("strong",null,"JS 引擎线程"),l(" 和 "),o("strong",null,"GUI 渲染线程"),l(" 互斥")],-1),X=o("h2",{id:"css-会阻塞页面渲染吗",tabindex:"-1"},[l("CSS 会阻塞页面渲染吗？ "),o("a",{class:"header-anchor",href:"#css-会阻塞页面渲染吗","aria-label":'Permalink to "CSS 会阻塞页面渲染吗？"'},"​")],-1),z=o("strong",null,"DOM 解析",-1),F=o("strong",null,"CSS 解析",-1),Q=o("code",null,"Render Tree",-1),Z=o("code",null,"DOM Tree",-1),oo=o("code",null,"CSSOM Tree",-1),lo=o("code",null,"CSSOM Tree",-1),eo=o("code",null,"CSS",-1),co=o("code",null,"CSS",-1),to=o("h2",{id:"domcontentloaded-与-load-的区别",tabindex:"-1"},[l("DOMContentLoaded 与 load 的区别？ "),o("a",{class:"header-anchor",href:"#domcontentloaded-与-load-的区别","aria-label":'Permalink to "DOMContentLoaded 与 load 的区别？"'},"​")],-1),no=o("ul",null,[o("li",null,[l("当整个页面及"),o("strong",null,"所有依赖资源"),l("都已完成加载时，将触发 "),o("code",null,"load"),l(" 事件。")])],-1),ro=t("",10),so=o("ul",null,[o("li",null,[l("当 "),o("code",null,"Render Tree"),l(" 中部分或全部元素的尺寸、结构、或某些属性发生改变时, 浏览器重新渲染部分或全部文档的过程称为"),o("strong",null,"回流"),l("。")])],-1),_o=t("",7),ao=o("code",null,"1. URL 解析(编码)",-1),uo=o("ul",null,[o("li",null,[l("会检查 "),o("code",null,"url"),l(" 的拼写 "),o("ul",null,[o("li",null,[l("如果是 文本，则拼接成默认搜索引擎加关键字的 "),o("code",null,"URL"),l(" 进行搜索")]),o("li",null,"如果是 URL 就进行页面访问请求，并加上协议头（http、https）")])])],-1),io=o("p",null,[o("strong",null,[o("code",null,"2. 检查缓存")])],-1),po=o("code",null,"2. DNS 解析",-1),ho=t("",2),So=o("code",null,"3. 建立 TCP 连接",-1),go=t("",1),To=o("code",null,"4. 发送HTTP/HTTPS请求",-1),fo=t("",1),mo=o("code",null,"5. 服务器响应请求",-1),bo=t("",1),Co=o("code",null,"6. 浏览器解析渲染页面",-1),Po=o("p",null,[o("strong",null,"参考页面渲染原理")],-1),ko=o("p",null,[o("code",null,"7. TCP断开连接(默认是keep-alive)")],-1),Mo=o("p",null,[l("现在的页面为了优化请求的耗时，默认都会开启持久连接"),o("code",null,"（keep-alive）"),l("，那么一个 TCP 连接确切关闭的时机，是这个 tab 标签页关闭的时候。这个关闭的过程就是"),o("code",null,"四次挥手"),l("。关闭是一个全双工的过程，发包的顺序是不一定的。")],-1),Ao=o("h2",{id:"浏览器渲染优化有哪些手段",tabindex:"-1"},[l("浏览器渲染优化有哪些手段？ "),o("a",{class:"header-anchor",href:"#浏览器渲染优化有哪些手段","aria-label":'Permalink to "浏览器渲染优化有哪些手段？"'},"​")],-1),Do=t("",1),Jo=o("ul",null,[o("li",null,[o("code",null,"CSS"),l("样式少，使用内嵌样式")]),o("li",null,[l("导入外部样式使用"),o("code",null,"link"),l("，而不是"),o("code",null,"@import"),l("，因为它会阻塞渲染。")])],-1),Io=o("ul",null,[o("li",null,"避免频繁操作样式"),o("li",null,"避免频繁操作 DOM"),o("li",null,"复杂动画使用定位脱离文当流"),o("li",null,"使用 transform 替代动画")],-1);function Vo(vo,Oo,Ro,No,Lo,Uo){const e=r("font");return s(),_("div",null,[p,h,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("Chromium")]),_:1})])]),S,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("Chrome")]),_:1})]),g,l("是谷歌对外的浏览器，不是开源的，面向的是普通用户、开发人员。")]),o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("V8")]),_:1})]),T]),f,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("进程: ")]),_:1})]),l(" 进程是 "),m,l(),b,l(" 的最小单位（是能拥有资源和独立运行的最小单位）。")]),o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("线程：")]),_:1})]),l(" 线程是 "),C,l(),P,l(" 的最小单位（是建立在进程基础上的一次程序运行单位）。")]),k,o("ul",null,[o("li",null,[o("p",null,[l("进程和线程都可以实现并发执行，但进程是独立的执行实体，而"),c(e,{color:"red"},{default:d(()=>[l("线程是依赖于进程的")]),_:1}),l("。")])]),o("li",null,[o("p",null,[l("进程之间资源相互隔离，"),c(e,{color:"red"},{default:d(()=>[l("线程共享所属进程的资源")]),_:1}),l("。")])]),M,A]),D,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("浏览器主进程：")]),_:1})])]),J,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l(" 渲染进程：")]),_:1})])]),I,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l(" GPU 进程：")]),_:1})])]),V,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l(" 网络进程：")]),_:1})])]),v,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l(" 插件进程：")]),_:1})])]),O,R,N,o("p",null,[o("strong",null,[l("平时我们说的 浏览器是"),c(e,{color:"red"},{default:d(()=>[l("多线程的")]),_:1}),l("指得是，浏览器中的 "),c(e,{color:"red"},{default:d(()=>[l("渲染进程")]),_:1}),l(" 是多线程的")])]),o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("1. GUI 渲染线程")]),_:1})])]),o("ul",null,[L,o("li",null,[o("p",null,[l("注意,"),c(e,{color:"red"},{default:d(()=>[l("GUI 渲染线程")]),_:1}),l(" 与 "),c(e,{color:"red"},{default:d(()=>[l("JS 引擎线程")]),_:1}),l("是互斥的,当 "),c(e,{color:"red"},{default:d(()=>[l("JS 引擎")]),_:1}),l("执行时 "),c(e,{color:"red"},{default:d(()=>[l("GUI 线程")]),_:1}),l("会被挂起（相当于被冻结了）,"),U,l(" 更新会被保存在一个队列中等到 "),E,l("空闲时立即被执行。")])])]),o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("2. JS 引擎线程（V8 引擎）")]),_:1})])]),o("ul",null,[q,o("li",null,[c(e,{color:"red"},{default:d(()=>[l("JS 引擎线程")]),_:1}),l(" 负责解析 "),x,l(" 脚本,运行代码。")]),o("li",null,[o("p",null,[l("JS 引擎一直等待着任务队列中任务的到来,然后加以处理,一个 Tab 页（renderer 进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序, 这就是我们平时说的 "),c(e,{color:"red"},{default:d(()=>[l("JS 是单线程的")]),_:1})])]),o("li",null,[o("p",null,[l("注意,"),c(e,{color:"red"},{default:d(()=>[l("GUI 渲染线程")]),_:1}),l("与 "),c(e,{color:"red"},{default:d(()=>[l("JS 引擎线程")]),_:1}),l("是互斥的,所以如果 JS 执行的时间过长,这样就会造成页面的渲染不连贯,导致页面渲染加载阻塞。")])])]),o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("3. 事件触发线程（事件循环）")]),_:1})])]),y,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("4. 定时触发器线程")]),_:1})])]),j,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("5. 异步 http 请求线程")]),_:1})])]),w,o("p",null,[l("其实上面已经说过了，如果 "),G,l(" 是多线程的方式来操作这些 "),H,l(",则可能出现 "),Y,l(" 操作的冲突。当然我们可以通过 "),c(e,{color:"red"},{default:d(()=>[l("锁")]),_:1}),l(" 来解决上面的问题。但为了避免因为引入了 "),c(e,{color:"red"},{default:d(()=>[l("锁")]),_:1}),l(" 而带来更大的复杂性,"),B,l(" 在最初就选择了单线程执行。")]),K,$,W,X,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("会的！！")]),_:1})])]),o("p",null,[z,l(" 和 "),F,l("是并行的, 所以 "),o("strong",null,[c(e,{color:"red"},{default:d(()=>[l("CSS 加载不会阻塞 DOM 的解析(在没有 JS 脚本的情况下)")]),_:1})]),l("。 然而,由于 "),Q,l("(渲染树) 是依赖于 "),Z,l(" 和 "),oo,l(" 的, 所以他必须等待到 "),lo,l(" 构建完成,也就是 "),eo,l(" 资源加载完成(或者 "),co,l(" 资源加载失败)后,才能开始渲染。因此,"),o("strong",null,[c(e,{color:"red"},{default:d(()=>[l("CSS 加载会阻塞 DOM 的渲染")]),_:1})])]),to,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("load")]),_:1})])]),no,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("DOMContentLoaded")]),_:1})])]),ro,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("回流(Reflow)")]),_:1})])]),so,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("重绘(Repaint)")]),_:1})])]),_o,o("p",null,[o("strong",null,[ao,l(" -- "),c(e,{color:"blue"},{default:d(()=>[l("浏览器主进程")]),_:1})])]),uo,io,o("p",null,[o("strong",null,[po,l(" -- "),c(e,{color:"red"},{default:d(()=>[l("网络进程")]),_:1})])]),ho,o("p",null,[o("strong",null,[So,l(" -- "),c(e,{color:"red"},{default:d(()=>[l("网络进程")]),_:1})])]),go,o("p",null,[o("strong",null,[To,l(" -- "),c(e,{color:"red"},{default:d(()=>[l("网络进程")]),_:1})])]),fo,o("p",null,[o("strong",null,[mo,l(" -- "),c(e,{color:"red"},{default:d(()=>[l("网络进程")]),_:1})])]),bo,o("p",null,[o("strong",null,[Co,l(" -- "),c(e,{color:"orange"},{default:d(()=>[l("渲染进程")]),_:1})])]),Po,ko,Mo,Ao,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("优化 JavaScript")]),_:1})])]),Do,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("优化 CSS 加载")]),_:1})])]),Jo,o("p",null,[o("strong",null,[c(e,{color:"blue"},{default:d(()=>[l("减少回流重绘")]),_:1})])]),Io])}const xo=n(i,[["render",Vo]]);export{qo as __pageData,xo as default};
