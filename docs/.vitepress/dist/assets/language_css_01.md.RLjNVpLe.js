import{_ as s,o as i,c as a,R as e}from"./chunks/framework.4hIqoSk1.js";const n="/larry-book-vite/assets/层叠上下文.N79uoGSu.webp",b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"language/css/01.md","filePath":"language/css/01.md","lastUpdated":1733279472000}'),l={name:"language/css/01.md"},t=e(`<h2 id="position都有哪些属性-分别有什么作用" tabindex="-1">position都有哪些属性，分别有什么作用？ <a class="header-anchor" href="#position都有哪些属性-分别有什么作用" aria-label="Permalink to &quot;position都有哪些属性，分别有什么作用？&quot;">​</a></h2><ul><li><p><code>static（静态定位）</code>：默认定位方式，元素按照标准的文档流（normal flow）顺序进行排列。这意味着元素不会受到top、right、bottom、left属性的影响，始终保持在原本的位置。</p></li><li><p><code>reactive（相对定位）</code>：元素并<strong>未脱离文档流</strong>，相对定位是指元素相对于其在文档流中的正常位置进行偏移，但仍然<strong>保留原来的空间</strong>，不会影响其他元素的位置。</p></li><li><p><code>absolute（绝对定位）</code>：元素<strong>脱离文档流</strong>，它的位置取决于最近的非static定位祖先元素。如果找不到这样的祖先元素，就相对于浏览器视窗进行定位。</p></li><li><p><code>fixed（固定定位）</code>：固定定位同样让元素<strong>脱离文档流</strong>，但它总是相对于浏览器视口定位，也就是说，无论页面如何滚动，元素都会保持在屏幕上的同一位置。</p></li><li><p><code>sticky（粘性定位）</code>：粘性定位是一种混合定位模式，元素在滚动范围内满足特定条件时表现为相对定位，在滚动超出这个范围时则转换为固定定位。</p></li></ul><h2 id="position-fixed什么时候会失效" tabindex="-1">position: fixed什么时候会失效？ <a class="header-anchor" href="#position-fixed什么时候会失效" aria-label="Permalink to &quot;position: fixed什么时候会失效？&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/2-CSS%E6%A8%A1%E5%9D%97.html#_24-position-fixed%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E5%A4%B1%E6%95%88" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/2-CSS模块.html#_24-position-fixed什么时候会失效</a></p><h2 id="link和-import的区别" tabindex="-1">link和@import的区别？ <a class="header-anchor" href="#link和-import的区别" aria-label="Permalink to &quot;link和@import的区别？&quot;">​</a></h2><p><strong>1. 引入方式</strong></p><ul><li><code>link</code> 是在html内部通过<code>&lt;link&gt;</code>标签的方式，引入外部css文件</li><li><code>@import</code> 是在css文件引入其他css文件。</li></ul><p><strong>2. 加载顺序</strong></p><ul><li><code>link</code> 引入的样式表会和 HTML 文档同时并行加载,不会阻塞 HTML 的解析</li><li><code>@import</code> 引入的样式表会等待 HTML 文档加载完成后,再去加载被引入的样式表,会阻塞 HTML 的解析。</li></ul><h2 id="盒模型有哪些" tabindex="-1">盒模型有哪些？ <a class="header-anchor" href="#盒模型有哪些" aria-label="Permalink to &quot;盒模型有哪些？&quot;">​</a></h2><p><strong>盒模型构成</strong>：由 内容(<code>content</code>)、内边距(<code>padding</code>)、 边框(<code>border</code>)、外边距(<code>margin</code>) 这四部分组成。</p><ol><li><p><strong>标准盒模型(box-sizing: content-box)</strong>： 设置宽度和高度时设置的是<code>content</code>的大小，<strong>盒子的大小</strong>还要加上<code>padding</code>、<code>border</code>；</p></li><li><p><strong>IE盒模型(box-sizing: border-box)</strong>：元素的宽度和高度包括内容区域（<code>content</code>）、填充（<code>padding</code>）和边框（<code>border</code>），但不包括外边距（<code>margin</code>）。</p></li></ol><p><strong>一般使用border-box IE盒模型</strong> 特别适合响应式布局和网格系统的设计。</p><h2 id="什么是bfc-有什么作用-如何创建bfc" tabindex="-1">什么是BFC，有什么作用，如何创建BFC？ <a class="header-anchor" href="#什么是bfc-有什么作用-如何创建bfc" aria-label="Permalink to &quot;什么是BFC，有什么作用，如何创建BFC？&quot;">​</a></h2><p>看这个：<a href="https://webjeffery.github.io/jeffery-blog/fe/css/#%E4%BB%80%E4%B9%88%E6%98%AF-bfc" target="_blank" rel="noreferrer">https://webjeffery.github.io/jeffery-blog/fe/css/#什么是-bfc</a></p><p><strong>概念:</strong></p><p><code>BFC(Block Formatting Context)</code>，<strong>块级格式化上下文</strong>，是一个独立的渲染区域，让处于<code>BFC</code>内部的元素与外部的元素相互隔离，使内外元素的不会相互影响。</p><p><strong>实际开发中的应用：</strong></p><ol><li>防止 <code>margin</code> 重叠 (同一个 BFC 中两个相邻 Box 的垂直边距 margin 会发生重叠，在不同的 BFC 中则不会发生重叠)</li><li>清除浮动</li></ol><p><strong>创建：</strong></p><ol><li>使用<code>float</code>属性：将元素的<code>float</code>属性设置为除<code>none</code>以外的值，可以创建一个BFC。</li><li>使用<code>overflow</code>属性：将元素的<code>overflow</code>属性设置为除visible以外的值，例如auto或hidden，可以创建一个BFC。</li><li>使用<code>display</code>属性：将元素的display属性设置为inline-block、table-cell、table-caption等特定的值，可以创建一个BFC。</li><li>使用<code>position</code>属性：将元素的position属性设置为absolute、fixed、relative或sticky，可以创建一个BFC。</li></ol><h2 id="css样式的优先级" tabindex="-1">css样式的优先级？ <a class="header-anchor" href="#css样式的优先级" aria-label="Permalink to &quot;css样式的优先级？&quot;">​</a></h2><p>说常用的就行：</p><p>!important &gt; 内联样式（style） &gt; ID选择器（id） &gt; 类选择器(class) &gt; 标签选择器</p><h2 id="如何清除浮动" tabindex="-1">如何清除浮动？ <a class="header-anchor" href="#如何清除浮动" aria-label="Permalink to &quot;如何清除浮动？&quot;">​</a></h2><p>太多了，记住平时项目里写的一种就行了。</p><p>创建一个类名，使用伪元素 + clear: both</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clearfix::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="如何解决display-inline-black缝隙问题" tabindex="-1">如何解决display:inline-black缝隙问题？ <a class="header-anchor" href="#如何解决display-inline-black缝隙问题" aria-label="Permalink to &quot;如何解决display:inline-black缝隙问题？&quot;">​</a></h2><p><code>display: inline-block</code> 元素在默认情况下会产生间隙，这是因为它们被视为行内元素，会保留默认的行框高度和基线对齐。</p><ol><li>使用 <code>font-size: 0;</code>：将 <code>inline-block</code> 元素的<strong>父元素的字体大小设置为 0</strong>，然后在 inline-block 元素上重新设置所需的字体大小。这样可以消除间隙，因为元素内部没有文字导致的间隙。</li><li>移除空格：在 HTML 代码中，将 inline-block 元素之间的空格删除，以消除间隙。</li></ol><h2 id="display-和-visibility-的区别" tabindex="-1">display 和 visibility 的区别？ <a class="header-anchor" href="#display-和-visibility-的区别" aria-label="Permalink to &quot;display 和 visibility 的区别？&quot;">​</a></h2><ul><li><p><code>display: none</code> 会使元素完全从渲染树中消失，不占据任何空间，而<code>visibility: hidden</code>不会使元素从渲染树中消失，仍然占据空间，只是内容不可见。</p></li><li><p><code>display: none</code> 会触发 <strong>重排、重绘</strong>，<code>visibility: hidden</code> 会触发 <strong>重绘</strong></p></li><li><p><code>dipslay: none</code> 是 <strong>非继承</strong> 属性, 子孙节点消失是因为元素本身从渲染树中消失，修改子孙节点的属性无法使其显示。 而 <code>visibility: hidden</code> 是 <strong>继承</strong> 属性，子孙节点消失是因为继承了<code>hidden</code>属性，但可以通过设置子孙节点的 <code>visibility: visible;</code> 来进行显示。</p></li></ul><h2 id="rgba-和opacity的区别" tabindex="-1">rgba()和opacity的区别？ <a class="header-anchor" href="#rgba-和opacity的区别" aria-label="Permalink to &quot;rgba()和opacity的区别？&quot;">​</a></h2><p>都是css中设置透明度的，区别在于<code>rgba</code> <strong>仅影响元素的颜色或背景色，不影响元素内的其他内容的透明度。</strong>，<code>opacity</code> 用于设置元素的整体透明度。它会影响元素以及元素内的所有内容的透明度，包括文本、图像等。设置元素的透明度会影响整个元素及其内容的可见性。</p><h2 id="回流-reflow-和重绘-repaint-的区别" tabindex="-1">回流（reflow）和重绘（repaint）的区别？ <a class="header-anchor" href="#回流-reflow-和重绘-repaint-的区别" aria-label="Permalink to &quot;回流（reflow）和重绘（repaint）的区别？&quot;">​</a></h2><h2 id="flex布局" tabindex="-1">flex布局？ <a class="header-anchor" href="#flex布局" aria-label="Permalink to &quot;flex布局？&quot;">​</a></h2><p>基础语法：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a> 实战：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></p><h2 id="网格布局" tabindex="-1">网格布局？ <a class="header-anchor" href="#网格布局" aria-label="Permalink to &quot;网格布局？&quot;">​</a></h2><p><a href="https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noreferrer">https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><h2 id="transform-可以实现哪些效果" tabindex="-1">transform 可以实现哪些效果？ <a class="header-anchor" href="#transform-可以实现哪些效果" aria-label="Permalink to &quot;transform 可以实现哪些效果？&quot;">​</a></h2><p><code>translate</code>：平移、<code>scale</code>： 缩放、<code>rotate</code>：旋转、<code>skew</code>：倾斜</p><h2 id="如何定义css动画" tabindex="-1">如何定义css动画？ <a class="header-anchor" href="#如何定义css动画" aria-label="Permalink to &quot;如何定义css动画？&quot;">​</a></h2><p>使用<code>@keyframes</code>来定义动画帧，使用<code>animation</code>来执行动画</p><h2 id="伪类和伪元素的区别和使用场景" tabindex="-1">伪类和伪元素的区别和使用场景？ <a class="header-anchor" href="#伪类和伪元素的区别和使用场景" aria-label="Permalink to &quot;伪类和伪元素的区别和使用场景？&quot;">​</a></h2><p>看这个：<a href="https://webjeffery.github.io/jeffery-blog/fe/css/#%E4%BC%AA%E9%80%89%E6%8B%A9%E5%99%A8-%E4%BC%AA%E5%85%83%E7%B4%A0%E5%92%8C%E4%BC%AA%E7%B1%BB" target="_blank" rel="noreferrer">https://webjeffery.github.io/jeffery-blog/fe/css/#伪选择器-伪元素和伪类</a></p><h2 id="如何解决a标点击后hover事件失效的问题" tabindex="-1">如何解决a标点击后hover事件失效的问题? <a class="header-anchor" href="#如何解决a标点击后hover事件失效的问题" aria-label="Permalink to &quot;如何解决a标点击后hover事件失效的问题?&quot;">​</a></h2><p><a href="https://interview.poetries.top/docs/excellent-docs/1-HTML%E6%A8%A1%E5%9D%97.html#_13-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3a%E6%A0%87%E7%82%B9%E5%87%BB%E5%90%8Ehover%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">https://interview.poetries.top/docs/excellent-docs/1-HTML模块.html#_13-如何解决a标点击后hover事件失效的问题</a></p><h2 id="web开发常用的图片格式以及区别" tabindex="-1">web开发常用的图片格式以及区别？ <a class="header-anchor" href="#web开发常用的图片格式以及区别" aria-label="Permalink to &quot;web开发常用的图片格式以及区别？&quot;">​</a></h2><ol><li><code>gif</code>：</li></ol><ul><li>优点：支持动画、适用于简单图像和图标。</li><li>缺点：色彩受限、不适合复杂图像。</li></ul><ol start="2"><li><code>jpeg</code>：</li></ol><ul><li>优点：广泛支持、压缩比高、适用于照片和复杂图像。</li><li>缺点：有损压缩，可能导致图像质量损失。</li></ul><ol start="3"><li><code>png</code>：</li></ol><ul><li>优点：无损压缩、支持透明度、适用于图标和图形。</li><li>缺点：文件大小较大。</li></ul><ol start="4"><li><code>webp</code>：</li></ol><ul><li>优点：高压缩率、支持无损和有损压缩、适用于Web应用。</li><li>缺点：兼容性较差，部分浏览器不支持。</li></ul><p><strong>应用：</strong></p><ul><li>图像质量：对于追求高质量图像的需求，<code>PNG</code>是首选。</li><li>文件大小：<code>JPEG</code>、<code>WebP</code>和<code>GIF</code>是减小文件大小的好选择。</li><li>透明度：<code>PNG</code> 和 <code>WebP</code>是唯一支持透明度的格式。</li><li>动画需求：<code>GIF</code> 和 <code>WebP</code>是支持动画的格式。</li></ul><h2 id="css中有哪些常用尺寸单位以及区别" tabindex="-1">css中有哪些常用尺寸单位以及区别？ <a class="header-anchor" href="#css中有哪些常用尺寸单位以及区别" aria-label="Permalink to &quot;css中有哪些常用尺寸单位以及区别？&quot;">​</a></h2><p>css一共有五个长度单位，分别是<code>px</code>，<code>em</code>，<code>rem</code>，<code>vw</code>，<code>vh</code></p><ul><li>除了<code>px</code>是绝对单位，其他都是相对单位。</li><li><code>em</code>相对于自身大小（但在<code>font-size</code>中相对于父元素字体大小）</li><li><code>rem</code>相对于根元素的字体大小</li><li><code>vw</code>相对于可视化窗口的宽（<code>1vw</code>就是1%可视化窗口宽度）</li><li><code>vh</code>相对于可视化窗口的高（<code>1vh</code>就是1%可视化窗口高度）</li><li>一般采用rem+媒体查询或者rem+vw来实现响应式布局。原理是当窗口大小发生变化时，通过媒体查询或者vw改变根元素的字体大小，从而改变以rem为单位的元素大小</li></ul><h2 id="实现垂直水平居中的方式" tabindex="-1">实现垂直水平居中的方式？ <a class="header-anchor" href="#实现垂直水平居中的方式" aria-label="Permalink to &quot;实现垂直水平居中的方式？&quot;">​</a></h2><p>有很多种，说出以下比较常见的就可以了。</p><ol><li><code>absolute + transform</code></li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  tansform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="2"><li>flex</li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="3"><li>grid</li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  justify-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="三栏布局的实现方案" tabindex="-1">三栏布局的实现方案？ <a class="header-anchor" href="#三栏布局的实现方案" aria-label="Permalink to &quot;三栏布局的实现方案？&quot;">​</a></h2><h2 id="css变量" tabindex="-1">css变量？ <a class="header-anchor" href="#css变量" aria-label="Permalink to &quot;css变量？&quot;">​</a></h2><p>css中的变量，类似于预处理器中的变量一样，但有着天然的优势CSS变量可以被浏览器识别解析，甚至可以用javascript访问或重新赋值。</p><p>使用 <code>--</code> 作为前缀和 <code>@</code>、<code>$</code>等sass和less区分开。</p><p>声明变量</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{       </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>引用变量</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.primary-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="css预处理器的作用" tabindex="-1">css预处理器的作用？ <a class="header-anchor" href="#css预处理器的作用" aria-label="Permalink to &quot;css预处理器的作用？&quot;">​</a></h2><p>主要是为了增强css的能力，这就要谈到CSS的不足了：<strong>没有变量(新的规范已经支持了)</strong>，<strong>不支持嵌套</strong>，<strong>编程能力较弱</strong>，<strong>代码复用性差</strong>。 浏览器不会识别这些，最后都要编译成css。</p><h2 id="postcss的作用" tabindex="-1">postcss的作用？ <a class="header-anchor" href="#postcss的作用" aria-label="Permalink to &quot;postcss的作用？&quot;">​</a></h2><p>PostCSS 是一个用于转换 CSS 的工具，它提供了一个插件化的架构，可以通过加载各种插件来处理 CSS。主要作用包括：</p><ul><li><p>**转换 CSS：**PostCSS 可以将 CSS 解析成抽象语法树（AST），并允许开发者编写插件来修改和转换 CSS。这使得开发者可以自定义和扩展 CSS 的功能，从而提供更灵活的编写样式的能力。</p></li><li><p>**自动添加浏览器前缀：**PostCSS 的插件生态系统中最常用的插件之一是 autoprefixer。它可以根据配置和浏览器兼容性自动为样式属性添加浏览器前缀，以确保在不同浏览器中正确显示样式。</p></li><li><p>**代码优化和压缩：**PostCSS 的插件可以用于优化和压缩 CSS 代码，删除不必要的空格、注释、重复规则等，以减小文件大小并提高加载速度。</p></li><li><p><strong>使用未来的 CSS 语法</strong>：PostCSS 可以支持使用未来的 CSS 语法和功能，例如使用 CSS Variables、CSS Modules、CSS Grid 等。通过一些插件，可以在现有浏览器中使用这些新特性，而无需等待浏览器的更新。</p></li></ul><h2 id="如果需要手动写动画-你认为最小时间间隔是多久-为什么-阿里" tabindex="-1">如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里） <a class="header-anchor" href="#如果需要手动写动画-你认为最小时间间隔是多久-为什么-阿里" aria-label="Permalink to &quot;如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）&quot;">​</a></h2><p>如果需要手动编写动画，建议将最小时间间隔设置为 <code>16.7ms</code>，即每帧动画的时间间隔。这是因为大多数显示器的默认刷新频率是 <code>60Hz</code>，也就是每秒刷新 <code>60</code> 次。在这种情况下，将动画的时间间隔设置为<code> 16.7ms</code> 可以确保每帧动画都能够在显示器刷新之前完成。(<code>1/60*1000ms ＝ 16.7ms</code>)</p><h2 id="z-index-大的元素一定在值小的上面吗" tabindex="-1">z-index 大的元素一定在值小的上面吗 ？ <a class="header-anchor" href="#z-index-大的元素一定在值小的上面吗" aria-label="Permalink to &quot;z-index 大的元素一定在值小的上面吗 ？&quot;">​</a></h2><p>z-index 的生效规则：只对指定了 position 属性的元素生效——只要不是默认值 static，其他的 absolute、relative、fixed 都可以使 z-index 生效。还有 flex 的子项目也会生肖。</p><p>不一定，要取决于是否在当前层叠上下文。</p><h2 id="层叠上下文覆盖规律" tabindex="-1">层叠上下文覆盖规律？ <a class="header-anchor" href="#层叠上下文覆盖规律" aria-label="Permalink to &quot;层叠上下文覆盖规律？&quot;">​</a></h2><img src="`+n+'"><h2 id="如何生成层叠上下文" tabindex="-1">如何生成层叠上下文？ <a class="header-anchor" href="#如何生成层叠上下文" aria-label="Permalink to &quot;如何生成层叠上下文？&quot;">​</a></h2><p>position 定位 z-index 弹性布局的子项（父元素 display:flex|inline-flex)，并且 z-index 不是 auto 时 opacity 非 1 的元素 transform 非 none 的元素 filter 非 none 的元素</p><h2 id="如何实现父元素覆盖子元素" tabindex="-1">如何实现父元素覆盖子元素？？ <a class="header-anchor" href="#如何实现父元素覆盖子元素" aria-label="Permalink to &quot;如何实现父元素覆盖子元素？？&quot;">​</a></h2><p>要实现父元素覆盖子元素，去给父元素设置一个很大的 z-index 是没有用的。因为这样他就成为一个层叠上下文的根元素了，无论子元素被如何设置都会在这个层叠上下文根元素之上。</p><p>正确的解法是把子元素的 z-index 设置为负数，这样父元素是一个块级元素，z-index&lt;0 的子元素会在块级元素之下。</p>',95),o=[t];function r(p,h,d,c,k,g){return i(),a("div",null,o)}const u=s(l,[["render",r]]);export{b as __pageData,u as default};
