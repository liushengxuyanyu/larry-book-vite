import{_ as p,D as h,o as t,c as k,k as s,I as n,w as l,a as i,R as e}from"./chunks/framework.4hIqoSk1.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"language/javascript/async.md","filePath":"language/javascript/async.md","lastUpdated":1733279472000}'),r={name:"language/javascript/async.md"},d=e("",5),E=s("p",null,[s("code",null,"Promise"),i(" 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大. 有了 "),s("code",null,"Promise"),i(" 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。")],-1),o=e("",1),c=e("",17),g=s("ul",null,[s("li",null,[s("code",null,"Promise.race()"),i("："),s("code",null,"const p = Promise.race([p1, p2, p3]);"),i(" 任何一个"),s("code",null,"promise"),i("实例"),s("strong",null,"率先改变状态"),i("，则结果p就跟着改变。")])],-1),y=e("",1),b=e("",1),u=e("",29);function m(F,A,C,v,D,_){const a=h("font");return t(),k("div",null,[d,s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:l(()=>[i("概念：")]),_:1})])]),E,s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:l(()=>[i("特点：")]),_:1})])]),o,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("缺点：")]),_:1})])]),c,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("全部成功 或 其中一个失败")]),_:1})])]),g,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("其中一个率先改变状态（不管成功或失败）")]),_:1})])]),y,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("全部都完成状态变更（不管成功或失败）")]),_:1})])]),b,s("p",null,[i("、"),s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("其中一个成功 或 全部失败")]),_:1})])]),u])}const P=p(r,[["render",m]]);export{f as __pageData,P as default};
